import play.sbt.routes.RoutesKeys
import sbt.Def
import scoverage.ScoverageKeys
import uk.gov.hmrc.DefaultBuildSettings
import uk.gov.hmrc.versioning.SbtGitVersioning.autoImport.majorVersion

lazy val appName: String = "plastic-packaging-tax-returns-frontend"
val silencerVersion      = "1.7.14"

lazy val root = (project in file("."))
  .enablePlugins(PlayScala, SbtAutoBuildPlugin, SbtDistributablesPlugin)
  .disablePlugins(JUnitXmlReportPlugin) //Required to prevent https://github.com/scalatest/scalatest/issues/1427
  .settings(DefaultBuildSettings.scalaSettings: _*)
  .settings(DefaultBuildSettings.defaultSettings(): _*)
  .settings(inConfig(Test)(testSettings): _*)
  .configs(IntegrationTest)
  .settings(inConfig(IntegrationTest)(itSettings): _*)
  .configs(A11yTest)
  .settings(inConfig(A11yTest)(org.scalafmt.sbt.ScalafmtPlugin.scalafmtConfigSettings): _*)
  .settings(majorVersion := 1)
  .settings(ThisBuild / useSuperShell := false)
  .settings(headerSettings(A11yTest): _*)
  .settings(automateHeaderSettings(A11yTest))
  .settings(scalaVersion := "2.13.12",
            name := appName,
            RoutesKeys.routesImport ++= Seq("models._",
                                            "models.Mode._",
                                            "uk.gov.hmrc.play.bootstrap.binders.RedirectUrl"
            ),
            TwirlKeys.templateImports ++= Seq("play.twirl.api.HtmlFormat",
                                              "play.twirl.api.HtmlFormat._",
                                              "uk.gov.hmrc.govukfrontend.views.html.components._",
                                              "uk.gov.hmrc.hmrcfrontend.views.html.components._",
                                              "uk.gov.hmrc.hmrcfrontend.views.html.helpers._",
                                              "views.ViewUtils._",
                                              "models.Mode",
                                              "controllers.routes._",
                                              "viewmodels.govuk.all._"
            ),
            PlayKeys.playDefaultPort := 8505,
            ScoverageKeys.coverageExcludedFiles := "<empty>;Reverse.*;.*handlers.*;.*components.*;.*forms.ConditionalMapping.*;.*config.FrontendAppConfig.*;;.*controllers.LanguageSwitchController.*" +
              ".*Routes.*;.*viewmodels.govuk.*;metrics\\\\..*;features\\\\..*;test\\\\..*;.*(BuildInfo|Routes|Options).*;logger.*\\\\(.*\\\\);",
            ScoverageKeys.coverageMinimumStmtTotal := 90.0,
            ScoverageKeys.coverageFailOnMinimum := true,
            ScoverageKeys.coverageHighlighting := true,
            scalacOptions ++= Seq("-feature"),
            // To resolve a bug with version 2.x.x of the scoverage plugin - https://github.com/sbt/sbt/issues/6997
            libraryDependencySchemes ++= Seq("org.scala-lang.modules" %% "scala-xml" % VersionScheme.Always),
            libraryDependencies ++= AppDependencies(),
            retrieveManaged := true,
            update / evictionWarningOptions :=
              EvictionWarningOptions.default.withWarnScalaVersionEviction(false),
            resolvers ++= Seq(Resolver.jcenterRepo),
            // concatenate js
            Concat.groups := Seq(
              "javascripts/application.js" ->
                group(Seq("javascripts/app.js"))
            ),
            pipelineStages := Seq(digest),
            // below line required to force asset pipeline to operate in dev rather than only prod
            Assets / pipelineStages := Seq(concat),
            // only compress files generated by concat

  )
  .settings(
    // silence all warnings on autogenerated files
    scalacOptions += "-P:silencer:pathFilters=target/.*",
    // Make sure you only exclude warnings for the project directories, i.e. make builds reproducible
    scalacOptions += s"-P:silencer:sourceRoots=${baseDirectory.value.getCanonicalPath}",
    // Suppress warnings due to mongo dates using $date in their Json representation
    scalacOptions += "-P:silencer:globalFilters=possible missing interpolator: detected interpolated identifier `\\$date`",
    libraryDependencies ++= Seq(
      compilerPlugin(
        "com.github.ghik" % "silencer-plugin" % silencerVersion cross CrossVersion.full
      ),
      "com.github.ghik" % "silencer-lib" % silencerVersion % Provided cross CrossVersion.full
    )
  )

lazy val testSettings: Seq[Def.Setting[_]] = Seq(
  fork := true,
  javaOptions ++= Seq("-Dconfig.resource=test.application.conf"),
  unmanagedSourceDirectories += baseDirectory.value / "test-utils"
)

lazy val itSettings = Defaults.itSettings ++ Seq(
  unmanagedSourceDirectories := Seq(baseDirectory.value / "it", baseDirectory.value / "test-utils"),
  unmanagedResourceDirectories := Seq(baseDirectory.value / "it" / "resources"),
  parallelExecution := false,
  fork := true,
  javaOptions ++= Seq("-Dconfig.resource=it.application.conf")
)

lazy val all = taskKey[Unit]("Runs units, its, and ally tests")
all := Def.sequential(
  Test / test, 
  IntegrationTest / test, 
  A11yTest / test
).value
